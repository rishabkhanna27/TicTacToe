{"version":3,"sources":["components/Square.js","components/Game.js","components/Helper.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","onClick","value","className","highlightWinner","react_default","a","createElement","Game","status","_useState","useState","Array","fill","_useState2","Object","slicedToArray","squares","setSquare","_useState3","_useState4","isXNext","setXNext","winningInfo","lines","i","length","_lines$i","b","c","winner","line","isDraw","WinningLogic","winnerHighlight","renderSquare","components_Square","nextSquare","slice","includes","Button","variant","size","href","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16275ebd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square({ onClick, value, highlightWinner }) {\r\n  const className = \"square\" + (highlightWinner ? \"highlight\" : \"\");\r\n  return (\r\n    <button className={className} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState } from \"react\";\r\nimport Square from \"../components/Square\";\r\nimport { WinningLogic } from \"../components/Helper\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Game() {\r\n  const [squares, setSquare] = useState(Array(9).fill(null));\r\n  const [isXNext, setXNext] = useState(true);\r\n\r\n  const winningInfo = WinningLogic(squares);\r\n  const winner = winningInfo.winner;\r\n\r\n  const winnerHighlight = winningInfo.line;\r\n  let status;\r\n  if (winner) {\r\n    status = \"Hurray the winner is \" + winner;\r\n    \r\n  } else if (winningInfo.isDraw) {\r\n    status = \"It's a Draw\";\r\n  } else {\r\n    status = \"Next Player is \" + (isXNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        onClick={() => {\r\n          const nextSquare = squares.slice();\r\n          nextSquare[i] = isXNext ? \"X\" : \"O\";\r\n          setXNext(!isXNext);\r\n          setSquare(nextSquare);\r\n        }}\r\n        value={squares[i]}\r\n        highlightWinner={winnerHighlight && winnerHighlight.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"game\">\r\n      \r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n      <Button className=\"button\" variant=\"info\" size=\"lg\" onClick={() => {setSquare(Array(9).fill(null));}} >Restart</Button>\r\n      <a href=\"https://github.com/rishabkhanna27\"><p className=\"git\">Made By :- Rishab_Khanna</p></a>\r\n    </div>\r\n    <a href=\"https://github.com/rishabkhanna27\"><p className=\"gitt\">Made By :- Rishab_Khanna</p></a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","export function WinningLogic(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n  \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n          winner: squares[a],\r\n          line: lines[i],\r\n          isDraw: false\r\n        };\r\n      }\r\n    }\r\n  \r\n    let isDraw = true;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === null) {\r\n        isDraw = false;\r\n      }\r\n    }\r\n  \r\n    return {\r\n      winner: null,\r\n      line: null,\r\n      isDraw: isDraw\r\n    };\r\n  }\r\n  ","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game';\r\n\r\nfunction App() {\r\n  return (\r\n   <Game />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}